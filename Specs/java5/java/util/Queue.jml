// This file is part of JML
// This includes all the Java 1.5 specs for java.lang.Math, and we
// want to fix that as soon as possible with some sort of refinement
// mechanism.

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass  Ave, Cambridge, MA 02139, USA.


/**
 * JML's specification of java.util.Queue.
 * This specification uses model methods and the \bigint type.
 * @author Daniel Bruns
 */

package java.util;

public interface Queue<E> extends Collection<E> {
    
    /*@ public normal_behavior
      @   requires n >= 0 && n < content.theSize;
      @   ensures !\fresh(\result);
      @   ensures containsObject((Object)\result);
      @ //** "magic" getter method used to specify the ordering of the queue.
      @ public pure model E _get(\bigint n);
      @*/
    
    /*@ public behavior
      @   ensures _get(size()-1) == e && size() == \old(size())+1;
      @   ensures (\forall \bigint i; 0 <= i & i < content.theSize-1; _get(i) == \old(_get(i)));
      @   ensures \result;
      @   assignable this.*;
      @ also
      @ public exceptional_behavior
      @   requires e == null & !containsNull;
      @   signals_only NullPointerException;
      @*/
    public boolean add(/*@ nullable @*/ E e) throws IllegalStateException,ClassCastException, NullPointerException, IllegalArgumentException;
    
    /*@ public normal_behavior
      @   requires !isEmpty();
      @   ensures \result == _get(0);
      @   ensures \result == null ==> containsNull;
      @ also
      @ public exceptional_behavior
      @   requires isEmpty();
      @*/
    public /*@ pure nullable @*/ E element() throws NoSuchElementException;

    /*@ public behavior
      @   requires  false && (* capacity restrictions respected *);
      @   ensures _get(size()-1) == e && size() == \old(size())+1;
      @   ensures (\forall \bigint i; 0 <= i & i < content.theSize-1; _get(i) == \old(_get(i)));
      @   ensures \result;
      @   assignable this.*;
      @ also
      @ public behavior
      @   requires false && (* capacity restrictions violated *);
      @   ensures !\result;
      @   assignable \nothing;
      @ also
      @ exceptional_behavior
      @   requires e == null & !containsNull;
      @   signals_only NullPointerException;
      @*/
    public boolean offer(/*@ nullable @*/ E e) throws ClassCastException, NullPointerException, IllegalArgumentException;
    
    /*@ public normal_behavior
      @   ensures \result == (isEmpty()? null : _get(0));
      @   ensures \result == null ==> isEmpty() | containsNull;
      @*/
    public /*@ pure nullable @*/ E peek();
    
    /*@ public normal_behavior
      @   requires isEmpty();
      @   ensures \result == null;
      @   assignable \nothing;
      @ also
      @ public normal_behavior
      @   requires !isEmpty();
      @   ensures \result == \old(_get(0));
      @   ensures (\forall \bigint i; 0 < i & i < content.theSize; _get(i-1) == \old(_get(i)));
      @   ensures size() == \old(size()) -1;
      @   ensures \result == null ==> containsNull;
      @   assignable this.*;
      @*/
    public /*@ nullable @*/ E poll();
    
    /*@ public exceptional_behavior
      @   requires isEmpty();
      @   assignable \nothing;
      @ also
      @ public normal_behavior
      @   requires !isEmpty();
      @   ensures \result == \old(_get(0));
      @   ensures (\forall \bigint i; 0 < i & i < content.theSize; _get(i-1) == \old(_get(i)));
      @   ensures size() == \old(size()) -1;
      @   ensures \result == null ==> containsNull;
      @   assignable this.*;
      @*/
    public /*@ nullable @*/ E remove() throws NoSuchElementException;
}