// $Id: File.refines-spec 2256 2006-12-18 04:25:44Z chalin $
// Generated by jmlspec from the .class file

package java.io;

/** Java 1.5 version, from earlier work by chalin.
*
* TODO - this does not appear to be different than the 1.4 version; delete this file once
* the similarity is verified
*/

//@ nullable_by_default
//-@ immutable
public class File implements Serializable, Comparable {

    // FIELDS
    public static final char pathSeparatorChar;
    public static final char separatorChar;

    public static final /*@non_null*/ String pathSeparator;
    public static final /*@non_null*/ String separator;

    //@ public invariant pathSeparator.length() == 1 && pathSeparator.charAt(0) == pathSeparatorChar;
    //@ public invariant separator.length() == 1 && separator.charAt(0) == separatorChar;

    // CONSTRUCTORS
    
    /*@pure*/ public File(/*@nullable*/ File parent, /*@non_null*/ String child);
    /*@pure*/ public File(/*@nullable*/ String parent, /*@non_null*/ String child);
    /*@pure*/ public File(/*@non_null*/ String pathname);
    /*@pure*/ public File(/*@non_null*/ java.net.URI uri);

    //@ requires prefix.length() >= 3;
    public static /*@non_null*/ File 
	createTempFile(/*@non_null*/ String prefix, 
		       /*@nullable*/ String suffix) throws IOException;

    //@ requires prefix.length() >= 3;
    public static /*@non_null*/ File 
	createTempFile(/*@non_null*/ String prefix, 
		       /*@nullable*/ String suffix, 
		       /*@nullable*/ File directory)
        throws IOException;

    // METHODS

    public int hashCode();
    public long lastModified();
    public long length();
    public void deleteOnExit();
    public boolean canRead();
    public boolean canWrite();
    public boolean createNewFile() throws IOException;
    public boolean delete();

    /*@ pure */ public boolean exists();
    /*@ pure */ public boolean isAbsolute();
    /*@ pure */ public boolean isDirectory();
    /*@ pure */ public boolean isFile();
    /*@ pure */ public boolean isHidden();

    public boolean mkdir();
    public boolean mkdirs();
    public boolean setReadOnly();
    public boolean setLastModified(long time);

    public /*@non_null*/ File getAbsoluteFile();
    public /*@non_null*/ File getCanonicalFile() throws IOException;
    public /*@non_null*/ File getParentFile();

    /*@ public normal_behavior
      @   requires isDirectory();
      @   ensures \result != null;
      @   ensures \nonnullelements(\result);
      @ also
      @ public normal_behavior
      @   requires !isDirectory();
      @   ensures \result == null;
      @*/
    //@ pure
    public /*@nullable*/ File[] listFiles();

    //@ pure
    public static /*@nullable*/ File[] listRoots();

/*
    //@ public normal_behavior
    //@   requires pathname != null;
    //@   ensures this == pathname ==>\result == 0;
    //@   //ensures \result == compareTo(pathname); // FIXME
    //@ pure
*/
    //public int compareTo(/*@non_null*/ File pathname);

    /*@ also public normal_behavior
      @    ensures \result == (\typeof(o) <: \typeof(this));
      @ public model pure boolean definedComparison(non_null Object o);
      @*/

    //@ also public normal_behavior
    //@   requires pathname instanceof File && definedComparison(pathname);
    //@   // FIXME - recursive ensures \result == this.compareTo(pathname);
    //@ pure
    public int compareTo(/*@non_null*/ File pathname);

    public boolean equals(/*@nullable*/ Object obj);
    public boolean renameTo(/*@non_null*/ File dest);

    public /*@non_null*/ String getAbsolutePath();
    public /*@non_null*/ String getCanonicalPath() throws IOException;
    public /*@non_null*/ String getName();
    public /*@non_null*/ String getParent();
    public /*@non_null*/ String getPath();
    public /*@non_null*/ String toString();
    public /*@nullable*/ String /*! FIXME: GET THIS TO WORK non_null */ [] list();
    public /*@non_null*/ java.net.URI toURI();

    public java.net.URL toURL()  throws java.net.MalformedURLException;

    public /*@non_null*/ File[] listFiles(/*@non_null*/ FileFilter filter);
    public /*@non_null*/ File[] listFiles(/*@non_null*/ FilenameFilter filter);
    public /*@non_null*/ String[] list(/*@non_null*/ FilenameFilter filter);

}
