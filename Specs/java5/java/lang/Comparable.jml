// @(#)$Id: Comparable.spec 2240 2006-12-16 17:12:00Z chalin $

// Copyright (C) 2001-2006 Iowa State University, DSRG.org.

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

package java.lang;

/** JML's specification of java.lang.Comparable.
 * These are objects with a total ordering that is an equivalence relation.
 * @version $Revision: 2240 $
 * @author Gary T. Leavens, et al.
 */
public interface Comparable<T> {
	// If T is a subclass of Comparable<T>, then all T objects are comparable.
	// It is not quite defined what it means if U is a subclass of Comparable<T>
	// (without being a subclass of T).
	// Syntactically it means that u.compareTo(t) is defined.
	
    /*@   public normal_behavior
      @     requires i < 0;
      @     ensures \result == -1;
      @ also
      @   public normal_behavior
      @     requires i == 0;
      @     ensures \result == 0;
      @ also
      @   public normal_behavior
      @     requires i > 0;
      @     ensures \result == 1;
      @ implies_that
      @   public model_program {
      @     return ((i < 0) ? -1 : ((i == 0) ? 0 : 1));
      @   }
      @ model static pure int sgn(int i);
      @*/

//    /*@ public normal_behavior
//      @    requires true;
//      @    ensures \result ==> \typeof(o) <: \type(T);
//      @ // subclasses may strengthen this contract.
//      @ public model pure boolean
//      @ definedComparison(non_null Object o);
//      @*/
	
	/** Override consistentWithEquals to indicate whether a given class's compareTo ordering
	 * is consistent with equals: a.equals(b) <==> a.compareTo(b) ==0.  
	 * Most classes are, but it is not necessarily the case.
	 */
	//@ public behavior
	//@    signals (Exception) false;
	//@ pure public model boolean consistentWithEquals();
	
	/** This declares that the value of consistentWithEquals() is the same for all members of a class.
	 * (We don't make consistentWithEquals static so it can be overridden and dynamically dispatched.)
	 */
	// the variable in a forall is not null
	// FIXME @ public invariant (\forall Comparable<T> o; \typeof(o) == \typeof(this) ==> o.consistentWithEquals() == this.consistentWithEquals());

	// FIXME @ public invariant consistentWithEquals() ==> (\forall T o; equals(o) <==> compareTo(o) == 0);

	/* FIXME @ public normal_behavior
      @    requires o == this && (\type(T) <: \type(Comparable<T>)); // reflexive
      @	   ensures  \result == 0;
      @ also public normal_behavior
      @    requires (\typeof(o) <: \type(Comparable<T>)) && \typeof(this) <: \type(T);
      @    ensures sgn(\result) == - sgn(((Comparable<T>)o).compareTo((T)this)); // antisymmetric
      @*/
	// A null argument is supposed to throw a NullPointerException
    /*@ pure @*/ int compareTo(/*@ non_null */ T o); // FIXME - change pure to query?
}
